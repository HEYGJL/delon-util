{"version":3,"names":["CookieService","_doc","platform","this","Object","defineProperty","prototype","get","document","isBrowser","doc","cookie","getAll","ret","arr","split","i","length","index","indexOf","name","decodeURIComponent","substring","key","put","value","options","opt","assign","path","expires","Date","toUTCString","optStr","attributes","keys","filter","k","map","join","encodeURIComponent","String","remove","undefined","removeAll","type","Injectable","args","providedIn","decorators","Inject","DOCUMENT","Platform","ScrollService","_getDoc","_getWin","defaultView","window","getScrollPosition","element","win","scrollLeft","scrollTop","pageXOffset","pageYOffset","scrollToPosition","position","scrollTo","scrollToElement","topOffset","body","scrollIntoView","scrollBy","getBoundingClientRect","top","scrollToTop","Promise","resolve","copyTextArea","createElement","style","height","opacity","width","appendChild","select","execCommand","parentNode","removeChild","nodes","childNodes","node","item","nodeType","outerHTML","toString","trim","textContent","el","renderer","classMap","preClean","removeAttribute","removeClass","addClass"],"sources":["../../../../packages/util/browser/cookie.service.ts","../../../../packages/util/browser/scroll.service.ts","../../../../packages/util/browser/copy.ts","../../../../packages/util/browser/is-empty.ts","../../../../packages/util/browser/style.ts"],"sourcesContent":["import { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\nexport interface CookieOptions {\n  path?: string;\n  domain?: string;\n  /**\n   * Expiration time, `number` is seconds\n   *\n   * 过期时间，`number` 类型表示秒数\n   */\n  expires?: number | Date | string;\n  secure?: boolean;\n  HttpOnly?: boolean;\n  SameSite?: boolean | 'lax' | 'strict' | 'none';\n}\n\n/**\n * A set of simple Cookie manipulation classes.\n *\n * 一组简单的 Cookie 操作类。\n */\n@Injectable({ providedIn: 'root' })\nexport class CookieService {\n  private get doc(): Document {\n    return this._doc || document;\n  }\n\n  /**\n   * Original cookie value\n   *\n   * 原始Cookie值\n   */\n  get cookie(): string {\n    return this.platform.isBrowser ? this.doc.cookie : '';\n  }\n\n  constructor(@Inject(DOCUMENT) private _doc: any, private platform: Platform) {}\n\n  /**\n   * Get all cookie key-value pairs\n   *\n   * 获取所有Cookie键值对\n   */\n  getAll(): { [key: string]: string } {\n    const ret: { [key: string]: string } = {};\n    const arr = this.cookie.split('; ');\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < arr.length; i++) {\n      const cookie = arr[i];\n      const index = cookie.indexOf('=');\n      if (index > 0) {\n        const name = decodeURIComponent(cookie.substring(0, index));\n        if (ret[name] == null) {\n          ret[name] = decodeURIComponent(cookie.substring(index + 1));\n        }\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Get the value of given cookie `key`\n   *\n   * 获取指定 `key` 的值\n   */\n  get(key: string): string | undefined {\n    return this.getAll()[key];\n  }\n\n  /**\n   * Sets a value for given cookie key\n   *\n   * 设置指定 Cookie 键的值\n   */\n  put(key: string, value: string | undefined, options?: CookieOptions): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    const opt = { path: '/', ...options };\n    if (typeof opt.expires === 'number') {\n      opt.expires = new Date(+new Date() + opt.expires * 1e3);\n    }\n    if (typeof opt.expires !== 'string') {\n      opt.expires = opt.expires ? opt.expires.toUTCString() : '';\n    }\n    const optStr: { [key: string]: string | boolean } = opt as any;\n    const attributes = Object.keys(optStr)\n      .filter(k => optStr[k] && optStr[k] !== true)\n      .map(k => `${k}=${(optStr[k] as string).split(';')[0]}`)\n      .join(';');\n    this.doc.cookie = encodeURIComponent(String(key)) + '=' + encodeURIComponent(String(value)) + (attributes ? '; ' + attributes : '');\n  }\n\n  /**\n   * Remove given cookie\n   *\n   * 移除指定 Cookie\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this.put(key, undefined, options);\n  }\n\n  /**\n   * Remove all cookies\n   *\n   * 移除所有 Cookies\n   */\n  removeAll(): void {\n    this.doc.cookie = '';\n  }\n}\n","import { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ScrollService {\n  private _getDoc(): Document {\n    return this._doc || document;\n  }\n\n  private _getWin(): Window {\n    const doc = this._getDoc();\n    return doc.defaultView || window;\n  }\n\n  constructor(@Inject(DOCUMENT) private _doc: any, private platform: Platform) {}\n\n  /**\n   * 获取滚动条位置\n   * @param element 指定元素，默认 `window`\n   */\n  getScrollPosition(element?: Element | Window): [number, number] {\n    if (!this.platform.isBrowser) {\n      return [0, 0];\n    }\n\n    const win = this._getWin();\n    if (element && element !== win) {\n      return [(element as Element).scrollLeft, (element as Element).scrollTop];\n    } else {\n      return [win.pageXOffset, win.pageYOffset];\n    }\n  }\n\n  /**\n   * 设置滚动条位置\n   * @param element 指定元素\n   */\n  scrollToPosition(element: Element | Window | null | undefined, position: [number, number]): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    (element || this._getWin()).scrollTo(position[0], position[1]);\n  }\n\n  /**\n   * 设置滚动条至指定元素\n   * @param element 指定元素，默认 `document.body`\n   * @param topOffset 偏移值，默认 `0`\n   */\n  scrollToElement(element?: Element | null, topOffset: number = 0): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    if (!element) {\n      element = this._getDoc().body;\n    }\n\n    element.scrollIntoView();\n\n    const win = this._getWin();\n    if (win && win.scrollBy) {\n      win.scrollBy(0, element!.getBoundingClientRect().top - topOffset);\n\n      if (win.pageYOffset < 20) {\n        win.scrollBy(0, -win.pageYOffset);\n      }\n    }\n  }\n\n  /**\n   * 滚动至顶部\n   * @param topOffset 偏移值，默认 `0`\n   */\n  scrollToTop(topOffset: number = 0): void {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n    this.scrollToElement(this._getDoc().body, topOffset);\n  }\n}\n","/**\n * Copy text to clipboard\n *\n * 复制字符串文档至剪贴板\n */\nexport function copy(value: string): Promise<string> {\n  return new Promise<string>((resolve): void => {\n    let copyTextArea: HTMLTextAreaElement | null = null;\n    try {\n      copyTextArea = document.createElement('textarea');\n      copyTextArea.style.height = '0px';\n      copyTextArea.style.opacity = '0';\n      copyTextArea.style.width = '0px';\n      document.body.appendChild(copyTextArea);\n      copyTextArea.value = value;\n      copyTextArea.select();\n      document.execCommand('copy');\n      resolve(value);\n    } finally {\n      if (copyTextArea && copyTextArea.parentNode) {\n        copyTextArea.parentNode.removeChild(copyTextArea);\n      }\n    }\n  });\n}\n","/**\n * Used to verify `<ng-content></ng-content>` is empty, useful for custom components.\n *\n * 用于校验 `<ng-content></ng-content>` 是否为空，自定义组件时蛮有用。\n */\nexport function isEmpty(element: HTMLElement): boolean {\n  const nodes = element.childNodes;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes.item(i);\n    if (node.nodeType === 1 && (node as HTMLElement).outerHTML.toString().trim().length !== 0) {\n      return false;\n    } else if (node.nodeType === 3 && node.textContent!.toString().trim().length !== 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { Renderer2 } from '@angular/core';\n\nfunction removeClass(el: HTMLElement, classMap: object, renderer: Renderer2): void {\n  // tslint:disable-next-line: forin\n  for (const i in classMap) {\n    renderer.removeClass(el, i);\n  }\n}\n\nfunction addClass(el: HTMLElement, classMap: any, renderer: Renderer2): void {\n  for (const i in classMap) {\n    if (classMap[i]) {\n      renderer.addClass(el, i);\n    }\n  }\n}\n\n/**\n * Update host component style `class`\n *\n * 更新宿主组件样式 `class`\n *\n * ```ts\n * updateHostClass(\n *  this.el.nativeElement,\n *  this.renderer,\n *  {\n *    [ 'classname' ]: true,\n *    [ 'classname' ]: this.type === '1',\n *    [ this.cls ]: true,\n *    [ `a-${this.cls}` ]: true\n *  })\n * ```\n */\nexport function updateHostClass(el: HTMLElement, renderer: Renderer2, classMap: object, preClean: boolean = false): void {\n  if (preClean === true) {\n    renderer.removeAttribute(el, 'class');\n  } else {\n    removeClass(el, classMap, renderer);\n  }\n  classMap = { ...classMap };\n  addClass(el, classMap, renderer);\n}\n"],"mappings":"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"}