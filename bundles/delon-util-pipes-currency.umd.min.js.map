{"version":3,"names":["CurrencyMegaPipe","srv","locale","this","isCN","startsWith","prototype","transform","value","options","res","mega","unitI18n","unit","type","Pipe","args","name","CurrencyService","String","decorators","Inject","LOCALE_ID","CurrencyPricePipe","format","CurrencyCNYPipe","cny","PIPES","CurrencyPipeModule","NgModule","declarations","exports"],"sources":["../../../../packages/util/pipes/currency/mega.pipe.ts","../../../../packages/util/pipes/currency/price.pipe.ts","../../../../packages/util/pipes/currency/cny.pipe.ts","../../../../packages/util/pipes/currency/module.ts"],"sourcesContent":["import { Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyMegaOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'mega' })\nexport class CurrencyMegaPipe implements PipeTransform {\n  private isCN = false;\n  constructor(private srv: CurrencyService, @Inject(LOCALE_ID) locale: string) {\n    this.isCN = locale.startsWith('zh');\n  }\n\n  /**\n   * Large number format filter\n   *\n   * 大数据格式化\n   */\n  transform(value: number | string, options?: CurrencyMegaOptions): string {\n    const res = this.srv.mega(value, options);\n    return res.value + (this.isCN ? res.unitI18n : res.unit);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyFormatOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'price' })\nexport class CurrencyPricePipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n  /**\n   * Format a number with commas as thousands separators\n   *\n   * 格式化货币，用逗号将数字格式化为千位分隔符\n   * ```ts\n   * 10000 => `10,000`\n   * 10000.567 => `10,000.57`\n   * ```\n   */\n  transform(value: number | string, options?: CurrencyFormatOptions): string {\n    return this.srv.format(value, options);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { CurrencyCNYOptions, CurrencyService } from '@delon/util/format';\n\n@Pipe({ name: 'cny' })\nexport class CurrencyCNYPipe implements PipeTransform {\n  constructor(private srv: CurrencyService) {}\n\n  /**\n   * Converted into RMB notation.\n   *\n   * 转化成人民币表示法\n   */\n  transform(value: number | string, options?: CurrencyCNYOptions): string {\n    return this.srv.cny(value, options);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CurrencyCNYPipe } from './cny.pipe';\nimport { CurrencyMegaPipe } from './mega.pipe';\nimport { CurrencyPricePipe } from './price.pipe';\n\nconst PIPES = [CurrencyMegaPipe, CurrencyPricePipe, CurrencyCNYPipe];\n\n@NgModule({\n  declarations: PIPES,\n  exports: PIPES,\n})\nexport class CurrencyPipeModule {}\n"],"mappings":"0fAIA,IAAAA,EAAA,WAEE,SAAoBA,EAAAC,EAAyCC,GAAzCC,KAAGF,IAAHA,EADZE,KAAIC,MAAG,EAEbD,KAAKC,KAAOF,EAAOG,WAAW,M,OAQhCL,EAAAM,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,IAAMC,EAAMP,KAAKF,IAAIU,KAAKH,EAAOC,GACjC,OAAOC,EAAIF,OAASL,KAAKC,KAAOM,EAAIE,SAAWF,EAAIG,O,EAbvD,G,cADC,CAAAC,KAAAC,OAAKC,KAAA,EAAEC,KAAM,W,yCAFgBC,mBAKe,CAAAJ,KAAAK,OAAAC,WAAA,EAAAN,KAAAO,SAAML,KAAA,CAACM,kBCFpD,IAAAC,EAAA,WACE,SAAAA,EAAoBtB,GAAAE,KAAGF,IAAHA,E,OAUpBsB,EAAAjB,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIuB,OAAOhB,EAAOC,I,EAZlC,G,cADC,CAAAK,KAAAC,OAAKC,KAAA,EAAEC,KAAM,Y,yCAFkBC,qBCGhC,IAAAO,EAAA,WACE,SAAAA,EAAoBxB,GAAAE,KAAGF,IAAHA,E,OAOpBwB,EAAAnB,UAAAC,UAAA,SAAUC,EAAwBC,GAChC,OAAON,KAAKF,IAAIyB,IAAIlB,EAAOC,I,EAT/B,G,cADC,CAAAK,KAAAC,OAAKC,KAAA,EAAEC,KAAM,U,yCAFeC,qBCI7B,IAAMS,EAAQ,CAAC3B,EAAkBuB,EAAmBE,GAMpDG,EAAA,a,cAJC,CAAAd,KAAAe,WAASb,KAAA,EACRc,aAAcH,EACdI,QAASJ,M"}